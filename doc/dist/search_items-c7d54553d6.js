searchNodes=[{"ref":"Xirsys.XTurn.html","title":"Xirsys.XTurn","type":"module","doc":"Application stub, used to parent TURN connections supervisor"},{"ref":"Xirsys.XTurn.html#main/1","title":"Xirsys.XTurn.main/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.html#start/2","title":"Xirsys.XTurn.start/2","type":"function","doc":"Called when an application is started. This function is called when an application is started using Application.start/2 (and functions on top of that, such as Application.ensure_started/2). This function should start the top-level process of the application (which should be the top supervisor of the application&#39;s supervision tree if the application follows the OTP design principles around supervision). start_type defines how the application is started: :normal - used if the startup is a normal startup or if the application is distributed and is started on the current node because of a failover from another node and the application specification key :start_phases is :undefined. {:takeover, node} - used if the application is distributed and is started on the current node because of a failover on the node node. {:failover, node} - used if the application is distributed and is started on the current node because of a failover on node node, and the application specification key :start_phases is not :undefined. start_args are the arguments passed to the application in the :mod specification key (e.g., mod: {MyApp, [:my_args]}). This function should either return {:ok, pid} or {:ok, pid, state} if startup is successful. pid should be the PID of the top supervisor. state can be an arbitrary term, and if omitted will default to []; if the application is later stopped, state is passed to the stop/1 callback (see the documentation for the c:stop/1 callback for more information). use Application provides no default implementation for the start/2 callback. Callback implementation for Application.start/2."},{"ref":"Xirsys.XTurn.Actions.Allocate.html","title":"Xirsys.XTurn.Actions.Allocate","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.Allocate.html#process/1","title":"Xirsys.XTurn.Actions.Allocate.process/1","type":"function","doc":"Dispatches a new process to cater for the client and his/her peers, whether send/receive or channels."},{"ref":"Xirsys.XTurn.Actions.Authenticates.html","title":"Xirsys.XTurn.Actions.Authenticates","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.Authenticates.html#process/1","title":"Xirsys.XTurn.Actions.Authenticates.process/1","type":"function","doc":"Authenticates the calling user. Any authentication requests without integrity and user credentials can be allowed via config."},{"ref":"Xirsys.XTurn.Actions.ChannelBind.html","title":"Xirsys.XTurn.Actions.ChannelBind","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.ChannelBind.html#process/1","title":"Xirsys.XTurn.Actions.ChannelBind.process/1","type":"function","doc":"Channel binds a peer to a given client allocation"},{"ref":"Xirsys.XTurn.Actions.ChannelData.html","title":"Xirsys.XTurn.Actions.ChannelData","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.ChannelData.html#process/1","title":"Xirsys.XTurn.Actions.ChannelData.process/1","type":"function","doc":"Handles incoming channel data. We route this directly to the peers, if they exist and have valid channels open."},{"ref":"Xirsys.XTurn.Actions.CreatePerm.html","title":"Xirsys.XTurn.Actions.CreatePerm","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.CreatePerm.html#process/1","title":"Xirsys.XTurn.Actions.CreatePerm.process/1","type":"function","doc":"Assigns a permission for a peer on a given client allocation"},{"ref":"Xirsys.XTurn.Actions.HasRequestedTransport.html","title":"Xirsys.XTurn.Actions.HasRequestedTransport","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.HasRequestedTransport.html#process/1","title":"Xirsys.XTurn.Actions.HasRequestedTransport.process/1","type":"function","doc":"Determines if a peer is assigned to a given transport type. Fixed to UDP as per TURN specification."},{"ref":"Xirsys.XTurn.Actions.NotAllocationExists.html","title":"Xirsys.XTurn.Actions.NotAllocationExists","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.NotAllocationExists.html#process/1","title":"Xirsys.XTurn.Actions.NotAllocationExists.process/1","type":"function","doc":"Checks if the current 5-tuple has previously been used. If so, then this is a duplicate allocation request and can be safely ignored."},{"ref":"Xirsys.XTurn.Actions.Refresh.html","title":"Xirsys.XTurn.Actions.Refresh","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.Refresh.html#process/1","title":"Xirsys.XTurn.Actions.Refresh.process/1","type":"function","doc":"Updates an allocations current expiry to its maximum set lifetime value"},{"ref":"Xirsys.XTurn.Actions.SendIndication.html","title":"Xirsys.XTurn.Actions.SendIndication","type":"module","doc":""},{"ref":"Xirsys.XTurn.Actions.SendIndication.html#process/1","title":"Xirsys.XTurn.Actions.SendIndication.process/1","type":"function","doc":"Sends data to a given peer"},{"ref":"Xirsys.XTurn.Allocate.Client.html","title":"Xirsys.XTurn.Allocate.Client","type":"module","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#add_peer_channel/3","title":"Xirsys.XTurn.Allocate.Client.add_peer_channel/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#add_permissions/2","title":"Xirsys.XTurn.Allocate.Client.add_permissions/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#child_spec/1","title":"Xirsys.XTurn.Allocate.Client.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Xirsys.XTurn.Allocate.Client.html#clear_header/1","title":"Xirsys.XTurn.Allocate.Client.clear_header/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#count/0","title":"Xirsys.XTurn.Allocate.Client.count/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#create/3","title":"Xirsys.XTurn.Allocate.Client.create/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#create/4","title":"Xirsys.XTurn.Allocate.Client.create/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#destroy/1","title":"Xirsys.XTurn.Allocate.Client.destroy/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#dont_fragment/1","title":"Xirsys.XTurn.Allocate.Client.dont_fragment/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#get_permission_cache/1","title":"Xirsys.XTurn.Allocate.Client.get_permission_cache/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#init/1","title":"Xirsys.XTurn.Allocate.Client.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. args is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state} except handle_info(:timeout, state) will be called after timeout milliseconds if no messages are received within the timeout. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_preferred/2","title":"Xirsys.XTurn.Allocate.Client.open_port_preferred/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_preferred/3","title":"Xirsys.XTurn.Allocate.Client.open_port_preferred/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_random/1","title":"Xirsys.XTurn.Allocate.Client.open_port_random/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_random/2","title":"Xirsys.XTurn.Allocate.Client.open_port_random/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_range/3","title":"Xirsys.XTurn.Allocate.Client.open_port_range/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#open_port_range/4","title":"Xirsys.XTurn.Allocate.Client.open_port_range/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#refresh/2","title":"Xirsys.XTurn.Allocate.Client.refresh/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#refresh_channel/2","title":"Xirsys.XTurn.Allocate.Client.refresh_channel/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#remove_peer_channel/3","title":"Xirsys.XTurn.Allocate.Client.remove_peer_channel/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#send_channel/5","title":"Xirsys.XTurn.Allocate.Client.send_channel/5","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#send_data/2","title":"Xirsys.XTurn.Allocate.Client.send_data/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#send_data/4","title":"Xirsys.XTurn.Allocate.Client.send_data/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#send_data_channel/4","title":"Xirsys.XTurn.Allocate.Client.send_data_channel/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#send_indication/5","title":"Xirsys.XTurn.Allocate.Client.send_indication/5","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#set_peer_details/3","title":"Xirsys.XTurn.Allocate.Client.set_peer_details/3","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#set_relay_address/2","title":"Xirsys.XTurn.Allocate.Client.set_relay_address/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.html#start_link/4","title":"Xirsys.XTurn.Allocate.Client.start_link/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Client.State.html","title":"Xirsys.XTurn.Allocate.Client.State","type":"module","doc":"TURN allocation state object"},{"ref":"Xirsys.XTurn.Allocate.Store.html","title":"Xirsys.XTurn.Allocate.Store","type":"module","doc":""},{"ref":"Xirsys.XTurn.Allocate.Store.html#delete/1","title":"Xirsys.XTurn.Allocate.Store.delete/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Store.html#exists/1","title":"Xirsys.XTurn.Allocate.Store.exists/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Store.html#init/0","title":"Xirsys.XTurn.Allocate.Store.init/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Store.html#insert/6","title":"Xirsys.XTurn.Allocate.Store.insert/6","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Store.html#lookup/1","title":"Xirsys.XTurn.Allocate.Store.lookup/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html","title":"Xirsys.XTurn.Allocate.Supervisor","type":"module","doc":""},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html#child_spec/1","title":"Xirsys.XTurn.Allocate.Supervisor.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html#init/1","title":"Xirsys.XTurn.Allocate.Supervisor.init/1","type":"function","doc":"Callback invoked to start the supervisor and during hot code upgrades. Developers typically invoke Supervisor.init/2 at the end of their init callback to return the proper supervision flags. Callback implementation for Supervisor.init/1."},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html#start_child/4","title":"Xirsys.XTurn.Allocate.Supervisor.start_child/4","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html#start_link/1","title":"Xirsys.XTurn.Allocate.Supervisor.start_link/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Allocate.Supervisor.html#terminate_child/1","title":"Xirsys.XTurn.Allocate.Supervisor.terminate_child/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Channels.Channel.html","title":"Xirsys.XTurn.Channels.Channel","type":"module","doc":"TURN channel state object"},{"ref":"Xirsys.XTurn.Channels.Store.html","title":"Xirsys.XTurn.Channels.Store","type":"module","doc":""},{"ref":"Xirsys.XTurn.Channels.Store.html#delete/1","title":"Xirsys.XTurn.Channels.Store.delete/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Channels.Store.html#exists/1","title":"Xirsys.XTurn.Channels.Store.exists/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Channels.Store.html#init/0","title":"Xirsys.XTurn.Channels.Store.init/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Channels.Store.html#insert/6","title":"Xirsys.XTurn.Channels.Store.insert/6","type":"function","doc":""},{"ref":"Xirsys.XTurn.Channels.Store.html#lookup/1","title":"Xirsys.XTurn.Channels.Store.lookup/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Pipeline.html","title":"Xirsys.XTurn.Pipeline","type":"module","doc":"provides handers for TURN over STUN"},{"ref":"Xirsys.XTurn.Pipeline.html#do_request/1","title":"Xirsys.XTurn.Pipeline.do_request/1","type":"function","doc":"TODO: check to make sure all attributes are handled TODO: client TCP connection establishment [RFC6062] section 4.2 attributes include: binding: Handles STUN requests [RFC5389] allocate: Handles TURN allocation requests [RFC5766] section 2.2 and section 5 refresh: Handles TURN refresh requests [RFC5766] section 7 channelbind: Handles TURN channelbind requests [RFC5766] section 11 createperm: Handles TURN createpermission requests [RFC5766] section 9 send: Handles TURN send indication requests [RFC5766] section 9"},{"ref":"Xirsys.XTurn.Pipeline.html#process_message/1","title":"Xirsys.XTurn.Pipeline.process_message/1","type":"function","doc":"Handles errored TURN message extraction"},{"ref":"Xirsys.XTurn.Server.html","title":"Xirsys.XTurn.Server","type":"module","doc":"Provides implementation of STUN application by managing socket messages through use of the STUN protocol module."},{"ref":"Xirsys.XTurn.Server.html#child_spec/1","title":"Xirsys.XTurn.Server.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Xirsys.XTurn.Server.html#init/1","title":"Xirsys.XTurn.Server.init/1","type":"function","doc":"Invoked when the server is started. start_link/3 or start/3 will block until it returns. args is the argument term (second argument) passed to start_link/3. Returning {:ok, state} will cause start_link/3 to return {:ok, pid} and the process to enter its loop. Returning {:ok, state, timeout} is similar to {:ok, state} except handle_info(:timeout, state) will be called after timeout milliseconds if no messages are received within the timeout. Returning {:ok, state, :hibernate} is similar to {:ok, state} except the process is hibernated before entering the loop. See c:handle_call/3 for more information on hibernation. Returning {:ok, state, {:continue, continue}} is similar to {:ok, state} except that immediately after entering the loop the c:handle_continue/2 callback will be invoked with the value continue as first argument. Returning :ignore will cause start_link/3 to return :ignore and the process will exit normally without entering the loop or calling c:terminate/2. If used when part of a supervision tree the parent supervisor will not fail to start nor immediately try to restart the GenServer. The remainder of the supervision tree will be started and so the GenServer should not be required by other processes. It can be started later with Supervisor.restart_child/2 as the child specification is saved in the parent supervisor. The main use cases for this are: The GenServer is disabled by configuration but might be enabled later. An error occurred and it will be handled by a different mechanism than the Supervisor. Likely this approach involves calling Supervisor.restart_child/2 after a delay to attempt a restart. Returning {:stop, reason} will cause start_link/3 to return {:error, reason} and the process to exit with reason reason without entering the loop or calling c:terminate/2. Callback implementation for GenServer.init/1."},{"ref":"Xirsys.XTurn.Server.html#start_link/0","title":"Xirsys.XTurn.Server.start_link/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Supervisor.html","title":"Xirsys.XTurn.Supervisor","type":"module","doc":""},{"ref":"Xirsys.XTurn.Supervisor.html#child_spec/1","title":"Xirsys.XTurn.Supervisor.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Xirsys.XTurn.Supervisor.html#init/1","title":"Xirsys.XTurn.Supervisor.init/1","type":"function","doc":"Callback invoked to start the supervisor and during hot code upgrades. Developers typically invoke Supervisor.init/2 at the end of their init callback to return the proper supervision flags. Callback implementation for Supervisor.init/1."},{"ref":"Xirsys.XTurn.Supervisor.html#start_link/2","title":"Xirsys.XTurn.Supervisor.start_link/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Timing.html","title":"Xirsys.XTurn.Timing","type":"module","doc":""},{"ref":"Xirsys.XTurn.Timing.html#local_time/0","title":"Xirsys.XTurn.Timing.local_time/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Timing.html#milliseconds_left/1","title":"Xirsys.XTurn.Timing.milliseconds_left/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Timing.html#milliseconds_left/2","title":"Xirsys.XTurn.Timing.milliseconds_left/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Timing.html#now/0","title":"Xirsys.XTurn.Timing.now/0","type":"function","doc":""},{"ref":"Xirsys.XTurn.Tuple5.html","title":"Xirsys.XTurn.Tuple5","type":"module","doc":"TURN allocation 5-Tuple object"},{"ref":"Xirsys.XTurn.Tuple5.html#create/2","title":"Xirsys.XTurn.Tuple5.create/2","type":"function","doc":""},{"ref":"Xirsys.XTurn.Tuple5.html#from_map/1","title":"Xirsys.XTurn.Tuple5.from_map/1","type":"function","doc":""},{"ref":"Xirsys.XTurn.Tuple5.html#to_map/1","title":"Xirsys.XTurn.Tuple5.to_map/1","type":"function","doc":""},{"ref":"readme.html","title":"XTurn - Xirsys TURN Server in Elixir","type":"extras","doc":"XTurn - Xirsys TURN Server in Elixir This is an implementation of a TURN server in Elixir (based on the xstun server project). It was originally written in Erlang and ported in 2014 when we migrated our other code. It&#39;s never been in production and, indeed, needs more work for that. However, it&#39;s a great little personal project and fun to work with. It works nicely with WebRTC. Supported Features TCP, UDP, TLS and DTLS supported Full TURN RFC5766 support (except rotating nonce) Full STUN RFC3489 support Simple user / pass storage with Web API interface Channel Binding / Data IS supported! WebRTC Data Channels ARE supported! Setup Open the config.exs file in config. All options are there."},{"ref":"readme.html#logging","title":"XTurn - Xirsys TURN Server in Elixir - Logging","type":"extras","doc":"Logging sloooooows the server down. For production quality (faster than Google&#39;s), drop the Logging level to :error or :info. Keeping at :debug is fine for development, but will provide a degragation of service. config :logger, level: :debug, compile_time_purge_level: :debug Ports The listening ports should be set, next. Standard ports are already set, but it can oftimes be beneficial to open on 80 and 443, too. Make sure to specify :secure on known secure ports, which will enable SSL. config :xturn, authentication: %{required: true}, permissions: %{required: false}, realm: &quot;xirsys.com&quot;, listen: [ {:udp, &#39;0.0.0.0&#39;, 3478}, {:tcp, &#39;0.0.0.0&#39;, 3478}, {:udp, &#39;0.0.0.0&#39;, 5349, :secure}, {:tcp, &#39;0.0.0.0&#39;, 5349, :secure} ], server_type: &quot;turn&quot;, server_id: &quot;turn.myserver.com&quot;, server_ip: {127, 0, 0, 1}, server_local_ip: {0, 0, 0, 0}, certs: [ {:certfile, &quot;certs/server.crt&quot;}, {:keyfile, &quot;certs/server.key&quot;} ] authentication: specifying required as true will prevent connections without a valid user and password in the user store permissions: TURN usually requires a create permissions call. Setting requireed to false will allow connections without permissions being set. server_ip: this is the public IP of your server. Not all server setups make this aware to the app, so it&#39;s necessary to set this manually (for now). server_local_ip: this is the internal IP to bind sockets to. Again, this may be temporary. You still need to set the IP in the individual socket listeners, too. Note that server_type is a Xirsys thing and can be ignored. Future Plans Create a rotating nonce Get a decent user credential store working with decent timeout capability (it&#39;s a little limited at the moment). Get RTP and RTCP working with a new MCU or SFU functionality Implement stream recording to file Implement third party streaming server connectivity Full support for IPv6 TCP Allocations (connect command) Donations Developing XTurn takes time (mostly personal), so donations are welcome. Donations can be sent via PayPal: Alternatively, if you would like to contribute, please feel free to let us know. Changelog Moved to separate document Contact For questions or suggestions, please email experts@xirsys.com Copyright Copyright (c) 2013 - 2019 Xirsys LLC All rights reserved. XTurn is licensed by Xirsys under the Apache License, Version 2.0. See LICENSE for the full license text."},{"ref":"license.html","title":"LICENSE","type":"extras","doc":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. &quot;License&quot; shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. &quot;Licensor&quot; shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. &quot;Legal Entity&quot; shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. &quot;You&quot; (or &quot;Your&quot;) shall mean an individual or Legal Entity exercising permissions granted by this License. &quot;Source&quot; form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. &quot;Object&quot; form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. &quot;Work&quot; shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). &quot;Derivative Works&quot; shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. &quot;Contribution&quot; shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, &quot;submitted&quot; means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as &quot;Not a Contribution.&quot; &quot;Contributor&quot; shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a &quot;NOTICE&quot; text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability."}]